
Hello guys!

Today I want to talk about [RUFF](https://github.com/astral-sh/ruff), my default formater (and much more) for Python language.

In a nutshell RUFF can be seen as tool that performs all theses tasks:

RUFF = `Flake8` + `isort` + `black` + `pydocstyle` + `pyupgrade` + `autoflake`

`Flake8` = `Linter`, which fix style + syntax errors

`isort` = *Sort* the imports

`black` = `formatter` ; `PEP8` complaint. Ex.: line-length: 88; Single/Double quotes; empty lines; parenthesis

`pydocstyle` = docstrings

`pyupgrade` = upgrade syntax for newer versions of `python` packages

`autoflake` = Remove unused imports and unused variables

So, instead of heaving to set up each one individually, use `RUFF` and have all these tools into a single one. `RUFF` was written in `rust`, so it is not a wrap of the previous mentioned. Also, it is a way faster than the previous tools.

## Setting it up on VsCode

In order to use it perfomattically, I use the [`Ruff VsCode Extension`](https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff).

Besides that, I have my `settings.json` with my personal preferences:

```json
"[python]": {
        "editor.defaultFormatter": "charliermarsh.ruff",
        "editor.formatOnSave": true,
        "editor.codeActionsOnSave": {
            "source.fixAll": "explicit",
            "source.organizeImports": "explicit"
        }
    }
```

But these are only global settings in my personal environment.

Working with others in the same project can be painfull if you don't have a default formatter (because others team members can have different formatters and specifications). Therefore, having a `.vscode/settings.json` inside of the folder of your project guarantees that everyone will use the same formatter:

```json

```

I also make `Ruff` as a default extension:

```toml

```

Last but not least, you can also install `ruff` and your environment and implement it on your CI/CD routines. But it will not be covered in here. Installing the extension and using the `.vscode/settings.json` guarantees that the sugestions will be made on the fly. But it depends on `VsCode`.

## Bonus (Caveat)

One thing that I struggled to start using a tool like this was because I used to write code in a single long line. I always received the warning `E501: line-too-long` from my `black`. It happens when the number of characters in a line was longer that 79 characters, which is the recommendation in PEP 8. After applying a tool like `ruff` my code changed drastically (as it would force to break lines), and it was uncomfortable in the beggining. So, I started to relax the parameter of the `line-length` a little bit (from 79 to for example, 150 characters), and started to analyse the impact of change. Then I realized that the impact on my previous code was not large at all. 

Leaving the limit as the default, PEP 8 argues that you can open multiple files side by side, being also easier to see the `git diff` changes.

Anyway, if you think that this limit is small, you can relax it a little bit globally, doing it by:

```

```

or skiping this rule by adding `# fmt: skip` in the end of a line. Or using `#fmt: on` in the beggining of a block and `#fmt: off` in the end.

That' s it!
Happy coding.
